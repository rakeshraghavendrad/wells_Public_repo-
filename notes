import re
from difflib import SequenceMatcher
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from Levenshtein import ratio as levenshtein_ratio

# Define a mapping dictionary for short forms
short_form_mapping = {
    "st": "street",
    "ave": "avenue",
    "ctr": "center",
    "wa": "washington",
    # Add more mappings as required
}

def normalize_short_forms(text):
    """
    Replace short forms in the text with their expanded forms.
    """
    words = text.split()
    normalized_words = [short_form_mapping.get(word.lower(), word) for word in words]
    return " ".join(normalized_words)

def preprocess_text(text):
    """
    Normalize case, remove punctuation, and extra spaces.
    """
    text = text.lower()  # Normalize case
    text = re.sub(r'[^\w\s]', '', text)  # Remove punctuation
    text = re.sub(r'\s+', ' ', text).strip()  # Remove extra spaces
    text = normalize_short_forms(text)  # Replace short forms
    return text

def jaccard_similarity(s1, s2):
    """
    Calculate Jaccard Similarity between two strings.
    """
    set1, set2 = set(s1.split()), set(s2.split())
    return len(set1 & set2) / len(set1 | set2)

def calculate_overall_similarity(s1, s2):
    """
    Calculate overall similarity score using Jaccard, Cosine, and Levenshtein similarity.
    """
    # Preprocess both strings
    s1_cleaned = preprocess_text(s1)
    s2_cleaned = preprocess_text(s2)
    
    # Jaccard similarity
    jaccard = jaccard_similarity(s1_cleaned, s2_cleaned)
    
    # Cosine similarity
    vectorizer = CountVectorizer().fit([s1_cleaned, s2_cleaned])
    vectors = vectorizer.transform([s1_cleaned, s2_cleaned])
    cosine = cosine_similarity(vectors)[0, 1]
    
    # Levenshtein similarity
    levenshtein = levenshtein_ratio(s1_cleaned, s2_cleaned)
    
    # Overall similarity score
    overall_score = (jaccard + cosine + levenshtein) / 3
    return overall_score

# Example Usage
database_address = "123 Washington Street"
customer_input = "123 wa st"

score = calculate_overall_similarity(database_address, customer_input)
print(f"Overall Similarity Score: {score}")
