# Modified Code to Display Extracted Information with Bounding Boxes
from PIL import Image, ImageEnhance, ImageDraw
import numpy as np
import os

# Load the image
def load_image(image_path):
    return Image.open(image_path)

# Preprocess the image using PIL
def preprocess_image(image):
    # Convert to grayscale
    gray = image.convert("L")
    # Enhance contrast
    enhancer = ImageEnhance.Contrast(gray)
    enhanced = enhancer.enhance(2.0)
    return enhanced

# Draw bounding boxes on the image
def draw_bounding_boxes(image, regions):
    draw = ImageDraw.Draw(image)
    for (x, y, w, h) in regions:
        draw.rectangle([x, y, x + w, y + h], outline="red", width=2)
    return image

# Simple text-like region detection based on pixel density
def detect_text_regions(image_array):
    binary = (image_array > 128).astype(np.uint8)
    regions = []
    for i in range(0, binary.shape[0], 20):
        for j in range(0, binary.shape[1], 20):
            block = binary[i:i+20, j:j+20]
            if np.mean(block) < 0.8:  # Detect denser areas
                regions.append((j, i, 20, 20))
    return regions

# Main function
def main(image_path):
    image = load_image(image_path)
    processed_image = preprocess_image(image)
    image_array = np.array(processed_image)
    regions = detect_text_regions(image_array)
    annotated_image = draw_bounding_boxes(image, regions)
    annotated_image.show()

# Run the code
image_path = "/mnt/data/Screenshot 2025-05-07 at 11.52.09â€¯AM.png"
main(image_path)



# Define expected field names based on ID structure
    field_names = ['head_shot', '4d DLN', '4a ISS', '1', '2', '8', '15 SEX', '16 HGT', '18 EYES', '17 WGT', '9a ENDORSEMENTS', '12 RESTRICTIONS', '5 DD']
    data = {field: [] for field in field_names}

    # Map detected regions to field names (simple assignment for demo)
    for i, (x, y, w, h) in enumerate(regions):
        field = field_names[i % len(field_names)]
        data[field].append((x, y, w, h))

    # Create DataFrame
    df = pd.DataFrame(data)
