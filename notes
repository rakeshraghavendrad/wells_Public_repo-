from sklearn.preprocessing import LabelEncoder

# Initialize the label encoder
le = LabelEncoder()

from sklearn.preprocessing import LabelEncoder

# Initialize the label encoder
le = LabelEncoder()

# Loop through each column in the dataframe
for col in df.columns:
    # Check if the column data type is 'object' (string)
    if df[col].dtype == 'object':
        # Create a new column with '_encoded' suffix and apply LabelEncoder
        df[col + '_encoded'] = le.fit_transform(df[col].astype(str))


# Select columns that end with '_encoded' and are not of type 'object'
encoded_columns = [col for col in df.columns if col.endswith('_encoded') and df[col].dtype != 'object']

# Create a new DataFrame with only the encoded columns that are not of type 'object'
df_encoded = df[encoded_columns]

# Display the DataFrame with only encoded columns
print(df_encoded.head())









# Encode the target variable 'profile_match'
df['profile_match_encoded'] = df['profile_match'].map({'Profile_matched': 1, 'Profile_notmatched': 0}).fillna(-1)  # Fill NaN with -1 for missing values


# Calculate correlation matrix
correlation_matrix = df[['first_name_encoded', 'second_name_encoded', 'email_encoded', 'zip_code_db1', 'profile_match_encoded']].corr()

# Display the full correlation matrix
print("Correlation Matrix:\n", correlation_matrix)


# Get the correlations with the target variable 'profile_match_encoded'
correlations_with_target = correlation_matrix['profile_match_encoded'].sort_values(ascending=False)
print("\nCorrelations with 'profile_match_encoded':\n", correlations_with_target)


