from pyspark.sql import SparkSession
from pyspark.sql.functions import col, when, monotonically_increasing_id

# Create Spark session
spark = SparkSession.builder.appName("ColumnComparison").getOrCreate()

# Sample data for DF1
data1 = [(1, 'A', 101), (2, 'B', 102), (3, 'C', 103), (4, 'D', 104)]
columns1 = ["C1", "C2", "C3"]
DF1 = spark.createDataFrame(data1, columns1)

# Sample data for DF2
data2 = [(1, 'X', 101), (2, 'Y', 102), (3, 'C', 103), (5, 'Z', 105)]
columns2 = ["D1", "D2", "D3"]
DF2 = spark.createDataFrame(data2, columns2)

# Add a row index column to both dataframes to align rows for comparison
DF1 = DF1.withColumn("row_idx", monotonically_increasing_id())
DF2 = DF2.withColumn("row_idx", monotonically_increasing_id())

# Join the two dataframes based on the row index
combined_df = DF1.join(DF2, "row_idx", "inner").drop("row_idx")

# List of column pairs to compare
column_pairs = [("C1", "D1"), ("C2", "D2"), ("C3", "D3")]

# Generate the comparison expressions
comparison_exprs = [when(col(col1) == col(col2), True).otherwise(False).alias(f"{col1}_{col2}_is_match") for col1, col2 in column_pairs]

# Select original columns and add comparison columns
result_df = combined_df.select(*combined_df.columns, *comparison_exprs)

# Show the result
result_df.show()




 Calculate and plot matching statistics for each column pair
for col1, col2 in column_pairs:
    comparison_col_name = f"{col1}_{col2}_is_match"
    
    # Calculate matching statistics
    total_count = combined_df.count()
    match_count = combined_df.filter(col(comparison_col_name) == True).count()
    match_percentage = (match_count / total_count) * 100

    print(f"Column Pair: {col1} vs {col2}")
    print(f"Total Rows: {total_count}")
    print(f"Matching Rows: {match_count}")
    print(f"Matching Percentage: {match_percentage:.2f}%")

    # Collect data to driver
    match_stats = combined_df.groupBy(comparison_col_name).count().collect()
    match_dict = {row[comparison_col_name]: row["count"] for row in match_stats}

    matching_count = match_dict.get(True, 0)
    non_matching_count = match_dict.get(False, 0)

    # Plotting
    labels = ['Matching', 'Non-Matching']
    counts = [matching_count, non_matching_count]

    plt.figure(figsize=(8, 6))
    plt.bar(labels, counts, color=['green', 'red'])
    plt.xlabel('Comparison Result')
    plt.ylabel('Count')
    plt.title(f'Comparison of {col1} and {col2}')
    plt.show()
