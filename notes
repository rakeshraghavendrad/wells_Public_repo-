Customers experienced challenges when accessing digital channels, prompting a need to pinpoint the factors contributing to digital friction. The objective is to identify these drivers and enhance the login experience to elevate customer satisfaction.







from functools import reduce

conditions = [f.when(f.col(c) > 0, 1).otherwise(0) for c in features]  # condition list 

df_sess = df_sess.withColumn("features", reduce(lambda x, y: x + y, conditions))

Letâ€™s breakdown this code 

The reduce function is used to iteratively combine the conditions in the conditions list using addition (lambda x, y: x + y).

The lambda x, y: x + y is a binary function (a function taking two arguments), where x represents the accumulated result and y represents the next element in the list.

reduce applies this binary function successively to the elements in the conditions list. It starts with the first two conditions, adds them together, 
then takes that result and adds it to the next condition, and so on, until all conditions are combined.

So, the purpose of using reduce and lambda x, y: x + y in this code is to combine the conditions for each column in the "features" list sequentially using addition. 
It ensures that the final "features" column contains the sum of the conditions applied to each corresponding column.
This approach is more flexible and allows you to combine conditions in a dynamic and sequential manner.

example for reduce 

numbers = [1, 2, 3, 4, 5]

sum_result = reduce(lambda x, y: x + y, numbers)

The lambda function lambda x, y: x + y takes two arguments, x and y.
x represents the accumulated result, and y represents the next element in the list.
The reduce function applies this lambda function successively to the elements in the numbers list.
Here's how the reduce process works:

Initial state: x is the first element (1) and y is the second element (2). The lambda function adds them: x + y becomes 1 + 2, resulting in 3.

Next state: x is now the accumulated result (3), and y is the next element in the list (3). The lambda function adds them: x + y becomes 3 + 3, resulting in 6.

This process continues until all elements in the list are processed.

The final result is the sum of all elements in the list: 1 + 2 + 3 + 4 + 5 = 15.

So, in this example, the lambda function lambda x, y: x + y is used with reduce to accumulate the sum of elements in the list. The role of x is to keep track of the accumulated result, and y represents the next element in the list.


however, Lambda functions can also have 3 variables X,Y,Z depending on the use case 



When compared with this query 

df_sess = df_sess.withColumn(
    "features",
    f.sum([f.when(f.col(c) > 0, 1).otherwise(0) for c in features])
)

Using f.sum Directly:

Instead of using reduce, it directly uses f.sum to sum up the conditions for each column in the "features" list and The summed conditions are applied to the DataFrame, creating a new column "features" with the sum of conditions.

In summary, both snippets create conditions for each column in the "features" list, but the first snippet uses reduce to combine conditions, while the second snippet directly uses f.sum for the same purpose.
