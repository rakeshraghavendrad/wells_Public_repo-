def generate_summary(row):
    # Convert values to numeric and round to 2 decimal places
    similarity_scores = row[['jaro_winkler', 'fuzzy_partial_ratio', 'levenshtein_score']].astype(float).round(2)

    # Check if all scores are equal
    if similarity_scores.nunique() == 1:
        return f"All similarity scores are equal ({similarity_scores.iloc[0]}). No significant mismatch detected."

    # Find the metric with the lowest score
    min_score_metric = similarity_scores.idxmin()
    min_score = similarity_scores[min_score_metric]

    # Generate appropriate message based on the weakest score
    if min_score_metric == "levenshtein_score":
        message = "Character-level differences detected, possibly typos or missing spaces."
    elif min_score_metric == "jaro_winkler":
        message = "Prefix mismatch or different order detected."
    else:  # fuzzy_partial_ratio
        message = "Additional/missing words may be present in one of the addresses."
    
    return f"{message} (Weakest score: {min_score_metric}={min_score})"

# Apply function to generate summary
df_1['Summary'] = df_1.apply(generate_summary, axis=1)
