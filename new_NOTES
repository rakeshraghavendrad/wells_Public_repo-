# Code to Map Coordinates to Field Names Using Custom Mapping
from PIL import Image, ImageEnhance, ImageDraw
import numpy as np
import pandas as pd
import os

# Load the image
def load_image(image_path):
    return Image.open(image_path)

# Preprocess the image using PIL
def preprocess_image(image):
    # Convert to grayscale
    gray = image.convert("L")
    # Enhance contrast
    enhancer = ImageEnhance.Contrast(gray)
    enhanced = enhancer.enhance(2.0)
    return enhanced

# Simple text-like region detection based on pixel density
def detect_text_regions(image_array):
    binary = (image_array > 128).astype(np.uint8)
    regions = []
    for i in range(0, binary.shape[0], 20):
        for j in range(0, binary.shape[1], 20):
            block = binary[i:i+20, j:j+20]
            if np.mean(block) < 0.8:  # Detect denser areas
                regions.append((j, i, 20, 20))
    return regions

# Validate if coordinates correspond to headshot
def is_headshot(coords, image_width, image_height):
    x, y, w, h = coords
    # Check if the region is significantly large and on the left side
    if w * h > (image_width * image_height * 0.1) and x < image_width * 0.4:
        return True
    return False

# Map detected coordinates to predefined field names using mapping dictionary
def map_coordinates_with_mapping(regions, image_width, image_height):
    mapping = {0: 'head_shot', 1: '4d DLN', 2: '4a ISS', 3: '4b EXP', 4: '3 DOB', 5: '1', 6: '2', 7: '8', 8: '15 SEX', 9: '16 HGT', 10: '18 EYES', 11: '17 WGT', 12: '9a ENDORSEMENTS', 13: '12 RESTRICTIONS', 14: '5 DD'}
    data = {field: [] for field in mapping.values()}

    for i, coords in enumerate(regions):
        field = mapping.get(i, f'Extra_{i}')
        data[field].append(coords)

    # Create DataFrame with columns as field names
    df = pd.DataFrame(dict([(k, pd.Series(v)) for k, v in data.items()]))
    return df

# Main function to extract and map coordinates
def extract_and_map(image_path):
    image = load_image(image_path)
    processed_image = preprocess_image(image)
    image_array = np.array(processed_image)
    image_width, image_height = image.size
    regions = detect_text_regions(image_array)
    df = map_coordinates_with_mapping(regions, image_width, image_height)
    print("Mapped Coordinates:")
    print(df)
    return df

# Run the function with the given image
image_path = "/mnt/data/D6280905-FAEF-4F4F-BE17-C89CA5F79F5E.png"
extract_and_map(image_path)
