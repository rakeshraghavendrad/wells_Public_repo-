def move_text_enhanced(image_path, coordinates, direction, percent):
    # Load the original image
    img = Image.open(image_path)
    img_rgb = img.convert("RGB")
    draw = ImageDraw.Draw(img_rgb)

    # Extract coordinates
    xmin, ymin, xmax, ymax = coordinates

    # Step 1: Convert to grayscale and enhance contrast
    gray = img.convert("L")
    inc = ImageEnhance.Contrast(gray)
    enhanced_gray = inc.enhance(2.0)
    sharpened_gray = enhanced_gray.filter(ImageFilter.SHARPEN)

    # Step 2: Mask the original coordinates with white after sharpening
    draw.rectangle((xmin, ymin, xmax, ymax), outline=None, fill='white', width=0)

    # Step 3: Restore color to the masked area
    cropped_color = img.crop((xmin, ymin, xmax, ymax))
    img_rgb.paste(cropped_color, (xmin, ymin))

    # Step 4: Move the text based on direction and percentage
    dx = int((xmax - xmin) * percent / 100)
    dy = int((ymax - ymin) * percent / 100)

    if direction == 'up':
        new_y = max(0, ymin - dy)
        moved_position = (xmin, new_y)
    elif direction == 'down':
        new_y = min(img.height - (ymax - ymin), ymin + dy)
        moved_position = (xmin, new_y)
    elif direction == 'left':
        new_x = max(0, xmin - dx)
        moved_position = (new_x, ymin)
    elif direction == 'right':
        new_x = min(img.width - (xmax - xmin), xmin + dx)
        moved_position = (new_x, ymin)

    # Step 5: Overlay the moved text onto the original colored image
    img_rgb.paste(cropped_color, moved_position)

    # Display the final image
    plt.figure(figsize=(10, 8))
    plt.imshow(img_rgb)
    plt.title(f"Text moved {direction} by {percent}% with background preservation")
    plt.axis('off')
    plt.show()

# Example usage
image_path = "/mnt/data/Screenshot 2025-05-13 at 8.01.28â€¯PM.png"
coordinates = (50, 50, 200, 100)  # Example coordinates
move_text_enhanced(image_path, coordinates, 'right', 5)
