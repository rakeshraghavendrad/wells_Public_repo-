def average_color(image, xmin, ymin, xmax, ymax):
    """
    Calculate the average color of a region.
    """
    region = image.crop((xmin, ymin, xmax, ymax))
    np_region = np.array(region)
    avg_color = np_region.mean(axis=(0, 1)).astype(int)
    return tuple(avg_color)

def move_text_with_color(image, text_coords_list, move_x, move_y):
    """
    Moves text within an image without dragging the background, using given coordinates.
    Arguments:
        image: PIL Image object.
        text_coords_list: List of tuples [(xmin, ymin, xmax, ymax), ...] with text bounding boxes.
        move_x: Number of pixels to move in the x direction.
        move_y: Number of pixels to move in the y direction.
    Returns:
        Modified image with moved text.
    """
    img = image.copy()
    draw = ImageDraw.Draw(img)

    for text_coords in text_coords_list:
        xmin, ymin, xmax, ymax = normalize_coordinates(*text_coords)

        # Extract text region from the image
        text_region = img.crop((xmin, ymin, xmax, ymax))

        # Calculate average background color for realistic masking
        background_color = average_color(img, xmin, ymin, xmax, ymax)

        # Fill the original text area with the average background color
        draw.rectangle((xmin, ymin, xmax, ymax), fill=background_color)

        # Calculate new position
        new_xmin = xmin + move_x
        new_ymin = ymin + move_y

        # Paste the text at the new location while maintaining original colors
        img.paste(text_region, (new_xmin, new_ymin))

    return img

# Example list of coordinates (from latest image)
text_coords_list = [(270, 84, 533, 154), (110, 158, 298, 158), (211, 276, 299, 158)]
move_x, move_y = 15, 10  # Move right and down

# Load the most recent uploaded image
image = Image.open("/mnt/data/Screenshot 2025-05-13 at 8.34.05â€¯PM.png")

# Apply the updated text movement method
modified_image_color = move_text_with_color(image, text_coords_list, move_x, move_y)

# Display the modified image
plt.figure(figsize=(8, 6))
plt.imshow(modified_image_color)
plt.title("Modified Image with Moved Text (Color Preserved)")
plt.axis("off")
plt.show()
