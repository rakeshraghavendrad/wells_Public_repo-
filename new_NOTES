# Code to Accurately Map Coordinates with Field-Specific Logic for All Fields
from PIL import Image, ImageEnhance, ImageDraw
import numpy as np
import pandas as pd
import os

# Load the image
def load_image(image_path):
    return Image.open(image_path)

# Preprocess the image using PIL
def preprocess_image(image):
    # Convert to grayscale
    gray = image.convert("L")
    # Enhance contrast
    enhancer = ImageEnhance.Contrast(gray)
    enhanced = enhancer.enhance(2.0)
    return enhanced

# Define distance thresholds for each field
distance_thresholds = {
    'Statename': 100, 'Title': 100, 'head_shot': 50, '4d DLN': 40, '4a ISS': 40,
    '4b EXP': 40, '3 DOB': 40, '1': 30, '2': 30, '8': 30, '15 SEX': 30, '16 HGT': 30,
    '18 EYES': 30, '17 WGT': 30, '9a ENDORSEMENTS': 30, '12 RESTRICTIONS': 30, '5 DD': 30
}

# Merge nearby regions based on field type
def merge_regions_by_field(field_name, regions):
    distance_threshold = distance_thresholds.get(field_name, 30)
    merged = []
    for x1, y1, w1, h1 in regions:
        merged_flag = False
        for index, (x2, y2, w2, h2) in enumerate(merged):
            # Check proximity to merge
            if abs(x1 - x2) < distance_threshold and abs(y1 - y2) < distance_threshold:
                # Merge the boxes
                new_x = min(x1, x2)
                new_y = min(y1, y2)
                new_w = max(x1 + w1, x2 + w2) - new_x
                new_h = max(y1 + h1, y2 + h2) - new_y
                merged[index] = (new_x, new_y, new_w, new_h)
                merged_flag = True
                break
        if not merged_flag:
            merged.append((x1, y1, w1, h1))
    return merged

# Detect text regions
def detect_text_regions(image_array):
    binary = (image_array > 128).astype(np.uint8)
    regions = []
    for i in range(0, binary.shape[0], 20):
        for j in range(0, binary.shape[1], 20):
            block = binary[i:i+20, j:j+20]
            if np.mean(block) < 0.8:
                regions.append((j, i, 20, 20))
    return regions

# Map detected coordinates to predefined field names
def map_coordinates_with_mapping(regions, image_width, image_height):
    mapping = {
        0: 'Statename', 1: 'Title', 2: 'head_shot', 3: '4d DLN', 4: '4a ISS', 5: '4b EXP',
        6: '3 DOB', 7: '1', 8: '2', 9: '8', 10: '15 SEX', 11: '16 HGT', 12: '18 EYES',
        13: '17 WGT', 14: '9a ENDORSEMENTS', 15: '12 RESTRICTIONS', 16: '5 DD'
    }
    data = {field: [] for field in mapping.values()}

    for i, coords in enumerate(regions):
        if i < len(mapping):
            field = mapping[i]
            # Merge regions dynamically based on field type
            merged_regions = merge_regions_by_field(field, [coords])
            data[field].extend(merged_regions)

    # Create DataFrame
    df = pd.DataFrame(dict([(k, pd.Series(v)) for k, v in data.items()]))
    return df

# Main function to extract and map coordinates
def extract_and_map(image_path):
    image = load_image(image_path)
    processed_image = preprocess_image(image)
    image_array = np.array(processed_image)
    regions = detect_text_regions(image_array)
    image_width, image_height = image.size
    df = map_coordinates_with_mapping(regions, image_width, image_height)
    print("Mapped Coordinates:")
    print(df)
    return df

# Run the function with the given image
image_path = "/mnt/data/Screenshot 2025-05-08 at 6.08.00 PM.png"
extract_and_map(image_path)



from PIL import Image, ImageDraw

# Load the image
image_path = "/mnt/data/Screenshot 2025-05-08 at 5.32.36 PM.png"
image = Image.open(image_path)

# Coordinates to display
coords = (20, 20, 20, 20)

# Draw the bounding box
draw = ImageDraw.Draw(image)
x, y, w, h = coords
draw.rectangle([x, y, x + w, y + h], outline="red", width=3)

# Display the image with the bounding box
image.show()








import cv2
import numpy as np
import pandas as pd

# Define mapping
mapping = {
    0: 'Statename', 1: 'Title', 2: 'head_shot', 3: '4d DLN', 4: '4a ISS', 5: '4b EXP',
    6: '3 DOB', 7: '1', 8: '2', 9: '8', 10: '15 SEX', 11: '16 HGT', 12: '18 EYES',
    13: '17 WGT', 14: '9a ENDORSEMENTS', 15: '12 RESTRICTIONS', 16: '5 DD'
}

# Load image
image = cv2.imread("license.jpg")

# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply threshold to detect text regions
_, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY_INV)

# Find contours
contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

coordinates = []
field_names = []

# Extract bounding boxes
for i, cnt in enumerate(contours):
    x, y, w, h = cv2.boundingRect(cnt)
    
    # Approximate field mapping (manual assignment required)
    if i < len(mapping):  # Ensure we don't exceed mapping keys
        field_names.append(mapping[i])
        coordinates.append((x, y, w, h))

# Convert to DataFrame
df = pd.DataFrame({"Field": field_names, "Coordinates": coordinates})

print(df)




import cv2
import numpy as np
import pandas as pd

# Load image
image = cv2.imread("license.jpg")

# Define mapping
mapping = {
    0: 'Statename', 1: 'Title', 2: 'head_shot', 3: '4d DLN', 4: '4a ISS', 5: '4b EXP',
    6: '3 DOB', 7: '1', 8: '2', 9: '8', 10: '15 SEX', 11: '16 HGT', 12: '18 EYES',
    13: '17 WGT', 14: '9a ENDORSEMENTS', 15: '12 RESTRICTIONS', 16: '5 DD'
}

# Sample extracted coordinates (Replace these with actual detected values)
coordinates = [
    (50, 100, 200, 40), (300, 100, 250, 50), (100, 200, 80, 80), (400, 200, 300, 50),
    (120, 300, 150, 40), (350, 300, 180, 50), (500, 350, 210, 40), (150, 400, 140, 40),
    (400, 450, 160, 50), (180, 500, 170, 40), (450, 550, 120, 40), (220, 600, 130, 50),
    (470, 650, 140, 50), (250, 700, 110, 40), (480, 750, 150, 40), (270, 800, 160, 50),
    (500, 850, 180, 40)
]

# Loop through each detected field and draw rectangles
for i, (x, y, w, h) in enumerate(coordinates):
    field_name = mapping.get(i, f"Unknown_{i}")
    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 255), 2)  # Red box
    cv2.putText(image, field_name, (x, y - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)

# Display the image with red rectangles
cv2.imshow("Detected Fields", image)
cv2.waitKey(0)
cv2.destroyAllWindows()

